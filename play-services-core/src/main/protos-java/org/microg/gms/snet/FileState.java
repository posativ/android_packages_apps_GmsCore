// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: protos-repo/snet.proto
package org.microg.gms.snet;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import okio.ByteString;

import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.STRING;

public final class FileState extends Message {

  public static final String DEFAULT_FILENAME = "";
  public static final ByteString DEFAULT_DIGEST = ByteString.EMPTY;

  @ProtoField(tag = 1, type = STRING)
  public final String fileName;

  @ProtoField(tag = 2, type = BYTES)
  public final ByteString digest;

  public FileState(String fileName, ByteString digest) {
    this.fileName = fileName;
    this.digest = digest;
  }

  private FileState(Builder builder) {
    this(builder.fileName, builder.digest);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FileState)) return false;
    FileState o = (FileState) other;
    return equals(fileName, o.fileName)
        && equals(digest, o.digest);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = fileName != null ? fileName.hashCode() : 0;
      result = result * 37 + (digest != null ? digest.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<FileState> {

    public String fileName;
    public ByteString digest;

    public Builder() {
    }

    public Builder(FileState message) {
      super(message);
      if (message == null) return;
      this.fileName = message.fileName;
      this.digest = message.digest;
    }

    public Builder fileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public Builder digest(ByteString digest) {
      this.digest = digest;
      return this;
    }

    @Override
    public FileState build() {
      return new FileState(this);
    }
  }
}
